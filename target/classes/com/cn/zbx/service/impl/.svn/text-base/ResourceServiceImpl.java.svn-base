package com.cn.zbx.service.impl;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cn.zbx.commons.Constants;
import com.cn.zbx.dao.TResourceDao;
import com.cn.zbx.pojo.TResource;
import com.cn.zbx.service.ResourceService;

@Service("resourceService")
@Transactional
public class ResourceServiceImpl implements ResourceService {
	
	@Resource
	private TResourceDao resourceDao;
	
	//根据条件查询资源
	@Override
	public List<TResource> getResources(TResource res) {
		// TODO Auto-generated method stub
		return resourceDao.select(res);
	}
	
	@Override
	public List<TResource> getResourcesByCateId(Long cateId){
		TResource res = new TResource();
		res.setResIsDelete(Constants.IS_DELETE_NOT);
		res.setCateId(cateId);
		res.setPageCount(1);
		res.setPageSize(10);
		res.setResAuditType(3);
		res.setSortFields("res_id");
		res.setSort("desc");
		return resourceDao.select(res);
	}
	
	//根据条件查询资源条数
	@Override
	public int getResCount(TResource res) {
		return resourceDao.selectCount(res);
	}

	//更新资源
	@Override
	public boolean updateResource(TResource res) {
		if(res == null){
			return false;
		}else{
			res.setResUpdateTime(new Date());
			int i = resourceDao.update(res);
			if(i > 0){
				return true;
			}else{
				return false;
			}
		}
	}

	//根据条件查询单条数据
	@Override
	public TResource getResBySelectPojo(TResource res) {
		if(res == null){
			res = new TResource();
		}
		res.setResIsDelete(Constants.IS_DELETE_NOT);
		return resourceDao.selectPojo(res);
	}
	
	//根据条件查询单条数据
	@Override
	public TResource getResByResId(Long resId) {
		if(resId == null){
			return null;
		}else{
			TResource res = new TResource();
			res.setResId(resId);
			res.setResIsDelete(Constants.IS_DELETE_NOT);
			return resourceDao.selectPojo(res );
		}
	}
	
}
