package com.cn.zbx.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cn.zbx.pojo.TUser;
import com.cn.zbx.service.UserService;
import com.cn.zbx.util.ImgCodeUtils;
import com.cn.zbx.util.ReturnJsonUtil;

/**
 * 用户模块
 * @author zyw
 */
@Controller
@RequestMapping(value="user")
public class UserController {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(UserController.class);
	
	@Resource
	private UserService userServive;
	
	/**
	 * 获取验证码
	 * @param response
	 * @param phone
	 */
	@RequestMapping(value="getCode")
	@ResponseBody
	public void getCode(HttpServletResponse response, String phone){
		boolean code = userServive.getCode(phone);
		if(code){
			ReturnJsonUtil.returnDataMsg(response);
		}else{
			ReturnJsonUtil.returnErrorMsg("0", "获取验证码失败", response);
		}
	}
	
	/**
	 * 根据短信验证码登录,返回token
	 * @param response
	 * @param phone
	 * @param code
	 */
	@RequestMapping(value="loginByCode")
	@ResponseBody
	public void loginByCode(HttpServletResponse response, String phone, String code){
		String token = userServive.loginByCode(phone, code);
		if(token == null){
			ReturnJsonUtil.returnErrorMsg("0", "登录失败", response);
		}else{
			Map<String,Object> map = new HashMap<String, Object>();
			map.put("token", token);
			map.put("user", userServive.getUserByToken(token));
			ReturnJsonUtil.returnDataMsg(map,response);
		}
	}

	/**
	 * 根据token获取用户详情
	 * @param response
	 * @param token
	 */
	@RequestMapping(value="getUserByToken")
	@ResponseBody
	public void getUserByToken(HttpServletResponse response,  HttpServletRequest request){
		String token = request.getHeader("token");
		if(token == null){
			ReturnJsonUtil.returnErrorMsg("0", "请重新登录", response);
		}else{
			TUser user = userServive.getUserByToken(token);
			if(user == null){
				ReturnJsonUtil.returnErrorMsg("0", "请重新登录", response);
			}else{
				ReturnJsonUtil.returnDataMsg(user,response);
			}
		}
	}
	
	/**
	 * 修改
	 * @param response
	 * @param user
	 */
	@RequestMapping(value="update")
	@ResponseBody
	public void update(HttpServletRequest request, HttpServletResponse response, TUser user){
		String token = request.getHeader("token");
		if(token == null){
			ReturnJsonUtil.returnErrorMsg("0", "请重新登录", response);
		}else{
			user.setToken(token);
			System.out.println(user);
			boolean insert = userServive.update(user);
			if(insert){
				//操作正确调用的返回方法
				ReturnJsonUtil.returnDataMsg(insert,response);
			}else{
				//操作错误调用的返回方法
				ReturnJsonUtil.returnErrorMsg("0", "修改失败", response);
			}
		}
	}
	
	/**
	 * 查询
	 * @param response
	 * @param user
	 */
	@RequestMapping(value="get")
	@ResponseBody
	public void get(HttpServletResponse response, TUser user){
		//操作正确调用的返回方法
		ReturnJsonUtil.returnDataMsg(userServive.select(user),response);
	}
	
	
	/**
	 * 删除
	 * @param response
	 * @param user
	 */
	@RequestMapping(value="del")
	@ResponseBody
	public void del(HttpServletResponse response, Long userId){
		//操作正确调用的返回方法
		ReturnJsonUtil.returnDataMsg(userServive.delete(userId),response);
	}
	
	
	
	
	
	
	
	/**
	 * 生成图片验证码
	 * @param response
	 */
	@RequestMapping(value = "getImgCode")
	public void getImgCode(HttpServletRequest request, HttpServletResponse response,Integer w, Integer h) {
		if(null == w || w == 0 || null == h || h == 0){
			return;
		}
		response.setHeader("Pragma", "No-cache");  
		response.setHeader("Cache-Control", "no-cache");  
		response.setDateHeader("Expires", 0);  
		response.setContentType("image/jpeg");  
		
		//生成随机字串  
		String verifyCode = ImgCodeUtils.generateVerifyCode(4);  
		//讲code保存到session
		request.getSession().setAttribute("imgCode", verifyCode);
		//生成图片 ,并返回图片流
		try {
 			ImgCodeUtils.outputImage(w, h, response.getOutputStream(), verifyCode);
		} catch (IOException e) {
			LOGGER.error(e.getMessage());
		}
	}
	
	
	
}
