package com.cn.zbx.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cn.zbx.pojo.TCategory;
import com.cn.zbx.service.CategoryService;
import com.cn.zbx.util.ReturnJsonUtil;


@Controller
@RequestMapping(value="category")
public class CategoryController {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(CategoryController.class);
	
	@Resource
	private CategoryService categoryService;
	
	@RequestMapping(value="get")
	@ResponseBody
	public void get(HttpServletResponse response, TCategory category){
		List<TCategory> listByCatePid = categoryService.get(category);
		ReturnJsonUtil.returnDataMsg(listByCatePid,response);
	}
	
	@RequestMapping(value="getAll")
	@ResponseBody
	public void getAll(HttpServletResponse response, TCategory category){
		List<Map<String,Object>> mapList = new ArrayList<Map<String,Object>>();
		category.setCatePid(0l);
		List<TCategory> listByCatePid = categoryService.get(category);
		for (TCategory tCategory : listByCatePid) {
			Map<String,Object> map = new HashMap<String, Object>();
			category.setCatePid(tCategory.getCateId());
			List<TCategory> subList = categoryService.get(category);
			map.put("par", tCategory);
			map.put("sub", subList);
			mapList.add(map);
			System.out.println("------------------"+map);
		}
		ReturnJsonUtil.returnDataMsg(mapList,response);
	}
	
	@RequestMapping(value="add")
	@ResponseBody
	public void add(HttpServletResponse response, TCategory category){
		boolean insert = categoryService.insert(category);
		if(insert){
			ReturnJsonUtil.returnDataMsg(response);
		}else{
			ReturnJsonUtil.returnErrorMsg("4", "新增分类失败", response);
		}
	}
	
	@RequestMapping(value="update")
	@ResponseBody
	public void update(HttpServletResponse response, TCategory category){
		if(category.getCateId() == null || category.getCateId() == 0){
			ReturnJsonUtil.returnErrorMsg("99", "id 不能为空", response);
		}else{
			boolean update = categoryService.update(category);
			if(update){
				ReturnJsonUtil.returnDataMsg(response);
			}else{
				ReturnJsonUtil.returnErrorMsg("4", "修改分类失败", response);
			}
		}
	}
	
	@RequestMapping(value="getByCateId")
	@ResponseBody
	public void getByCateId(HttpServletResponse response, Long cateId){
		if(cateId == null){
			ReturnJsonUtil.returnErrorMsg("99", "id 不能为空", response);
		}else{
			TCategory byCateId = categoryService.getByCateId(cateId);
			if(byCateId == null){
				ReturnJsonUtil.returnErrorMsg("99", "没有此分类", response);
			}else{
				ReturnJsonUtil.returnDataMsg(byCateId,response);
			}
		}
	}
	
	@RequestMapping(value="getByCatePid")
	@ResponseBody
	public void getByCatePid(HttpServletResponse response, Long catePid){
		if(catePid == null){
			ReturnJsonUtil.returnErrorMsg("99", "id 不能为空", response);
		}else{
			List<TCategory> listByCatePid = categoryService.getListByCatePid(catePid);
			ReturnJsonUtil.returnDataMsg(listByCatePid,response);
		}
	}
	
	
	
	
}
